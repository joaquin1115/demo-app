name: Run Database Migration

# Trigger configuration
on:
  workflow_dispatch:  # Manual trigger
  # Uncomment below to enable automated deployments
  # push:
  #   branches: [main]
  #   paths: ["infrastructure/app-infrastructure/**"]
  # pull_request:
  #   branches: [main]
  #   paths: ["infrastructure/app-infrastructure/**"]

# Environment variables
env:
  WORKING_DIR_DB: "./app-code/database"

# Required permissions
permissions:
  id-token: write
  contents: read

jobs:
  # Infrastructure deployment job
  deploy-db-migration:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: temp_migration_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres
          --hostname postgres

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Generate INSERT-based migration script
        working-directory: ${{ env.WORKING_DIR_DB }}
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

          # Copy CSV files to container
          docker cp ./data postgres:/var/lib/postgresql/data/

          # Run migration script inside PostgreSQL container
          docker exec -u postgres postgres psql -d temp_migration_db -f /var/lib/postgresql/data/init.sql

          # Generate database dump
          docker exec -u postgres postgres pg_dump --column-inserts -d temp_migration_db > migration.sql

          # View migration.sql
          cat migration.sql