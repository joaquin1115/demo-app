name: Deploy app to AWS

on:
  workflow_dispatch:
  # push:
  #   branches: [main]
  #   paths: ["terraform/**"]

  # pull_request:
  #   branches: [main]
  #   paths: ["terraform/**"]

env:
  AWS_REGION: "us-east-1"
  TERRAFORM_VERSION: "1.5.0"
  NODE_VERSION: "21"
  JAVA_VERSION: "17"

permissions:
      id-token: write
      contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Setup Java for backend build
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # Deploy Amplify and capture outputs
      - name: Deploy Amplify backend
        working-directory: ./src/frontend
        run: |
          npm install ampx
          npx ampx sandbox
          echo "COGNITO_USER_POOL_ID=$(jq -r '.userPoolId' amplify_outputs.json)" >> $GITHUB_ENV
          echo "COGNITO_USER_POOL_CLIENT_ID=$(jq -r '.userPoolClientId' amplify_outputs.json)" >> $GITHUB_ENV

      # Initialize and apply Terraform
      - name: Deploy Terraform project
        working-directory: ./terraform
        run: |
          terraform init
          terraform plan -var="cognito_user_pool_id=${{ env.COGNITO_USER_POOL_ID }}" \
                        -var="cognito_user_pool_client_id=${{ env.COGNITO_USER_POOL_CLIENT_ID }}" \
                        -var="aws_region=${{ env.AWS_REGION }}" \
                        -var="db_name=${{ secrets.DB_NAME }}" \
                        -var="db_username=${{ secrets.DB_USERNAME }}" \
                        -var="db_password=${{ secrets.DB_PASSWORD }}" \
                        -out=tfplan
          terraform apply -auto-approve tfplan

      # Deploy database
      - name: Deploy database
        run: |
          DB_ENDPOINT=$(terraform -chdir=./terraform output -raw db_endpoint)
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          # Install PostgreSQL client
          sudo apt-get update && sudo apt-get install -y postgresql-client
          
          # Deploy schema and data
          PGPASSWORD=$DB_PASSWORD psql --set csv_path=$(realpath ./src/database/data/) -h $DB_ENDPOINT -U $DB_USER -d $DB_NAME -f ./src/database/init.sql

      # Build and deploy backend
      - name: Build and deploy backend
        working-directory: ./src/backend
        run: |
          # Build the application
          ./mvnw clean package -DskipTests
          
          # Get ECR repository URL from Terraform output
          ECR_REPO=$(terraform -chdir=../../terraform output -raw ecr_repository_url)
          
          # Build and push Docker image
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPO
          docker build -t $ECR_REPO:latest .
          docker push $ECR_REPO:latest
          
          # Update ECS service to pick up new image
          aws ecs update-service --cluster $(terraform -chdir=../../terraform output -raw ecs_cluster_name) \
                                --service $(terraform -chdir=../../terraform output -raw ecs_service_name) \
                                --force-new-deployment

      # Build and deploy frontend
      - name: Build and deploy frontend
        working-directory: ./src/frontend
        run: |
          # Install dependencies and build
          npm install
          npm run build
          
          # Get S3 bucket name from Terraform output
          S3_BUCKET=$(terraform -chdir=../../terraform output -raw frontend_bucket_name)
          
          # Deploy to S3
          aws s3 sync build/ s3://$S3_BUCKET/
          
          # Invalidate CloudFront cache
          DISTRIBUTION_ID=$(terraform -chdir=../../terraform output -raw cloudfront_distribution_id)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
