name: Deploy app to AWS

on:
  workflow_dispatch:
  # push:
  #   branches: [main]
  #   paths: ["infrastructure/app-infrastructure/**"]

  # pull_request:
  #   branches: [main]
  #   paths: ["infrastructure/app-infrastructure/**"]

env:
  AWS_REGION: "us-east-1"
  TERRAFORM_VERSION: "1.5.0"
  NODE_VERSION: "21"
  JAVA_VERSION: "17"

permissions:
      id-token: write
      contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Setup Java for backend build
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      # Initialize and apply Terraform
      - name: Deploy Terraform project
        working-directory: ./infrastructure/app-infrastructure
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=app/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_TABLE }}"
      
      # Build and deploy frontend
      - name: Build and deploy frontend
        working-directory: ./app-code/frontend
        run: |
          # Get Cognito user pool ID and client ID from Terraform output
          COGNITO_USER_POOL_ID=$(terraform -chdir=../../infrastructure/app-infrastructure output -raw user_pool_id)
          COGNITO_USER_POOL_CLIENT_ID=$(terraform -chdir=../../infrastructure/app-infrastructure output -raw user_pool_client_id)

          # Create the environments directory if it doesn't exist
          mkdir -p src/environments
          
          # Create environment file
          cat << EOF > src/environments/environment.prod.ts
          export const environment = {
            production: true,
            cognito: {
              userPoolId: '$COGNITO_USER_POOL_ID',
              userPoolClientId: '$COGNITO_USER_POOL_CLIENT_ID'
            }
          };
          EOF

          # Install dependencies and build
          npm install

          chmod +x ../../scripts/fix-amplify-package.sh
          ../../scripts/fix-amplify-package.sh
    
          npm run build
          
          # Get S3 bucket name from Terraform output
          S3_BUCKET=$(terraform -chdir=../../infrastructure/app-infrastructure output -raw frontend_bucket_name)
          
          # Deploy to S3
          aws s3 sync build/ s3://$S3_BUCKET/
          
          # Invalidate CloudFront cache
          DISTRIBUTION_ID=$(terraform -chdir=../../infrastructure/app-infrastructure output -raw cloudfront_distribution_id)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
